# Import Microsoft Graph module
Import-Module Microsoft.Graph -Force

# Connect to Microsoft Graph with required scopes
Write-Host "Connecting to Microsoft Graph..." -ForegroundColor Yellow
Connect-MgGraph -Scopes "Directory.Read.All", "MailboxSettings.Read" -NoWelcome

# Initialize report array
$Report = @()

# Get all users with mailboxes
Write-Host "Retrieving all mailboxes..." -ForegroundColor Yellow
$Users = Get-MgUser -All -Property 'id', 'userPrincipalName', 'displayName' -ErrorAction Stop

# Process each user to find shared mailboxes
foreach ($User in $Users) {
    try {
        # Get mailbox settings to check RecipientTypeDetails
        $MailboxDetails = Get-MgUserMailboxSetting -UserId $User.Id -ErrorAction SilentlyContinue
        if ($MailboxDetails.RecipientTypeDetails -eq 'SharedMailbox') {
            # Get license details
            $LicenseDetails = Get-MgUserLicenseDetail -UserId $User.Id -ErrorAction SilentlyContinue
            $LicenseStatus = if ($LicenseDetails) {
                $AssignedLicenses = $LicenseDetails | ForEach-Object { $_.SkuPartNumber }
                if ($AssignedLicenses) {
                    "Licensed: $($AssignedLicenses -join ', ')"
                } else {
                    "No licenses assigned"
                }
            } else {
                "No licenses assigned"
            }

            # Create report object
            $ReportObject = [PSCustomObject]@{
                UserPrincipalName = $User.UserPrincipalName
                DisplayName       = $User.DisplayName
                MailboxType       = $MailboxDetails.RecipientTypeDetails
                LicenseStatus     = $LicenseStatus
                LastChecked       = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
            }

            # Add to report
            $Report += $ReportObject

            # Output to console
            Write-Host "Found shared mailbox: $($User.UserPrincipalName), DisplayName: $($User.DisplayName), Licenses: $LicenseStatus" -ForegroundColor Green
        }
    }
    catch {
        Write-Warning "Error processing $($User.UserPrincipalName): $($_.Exception.Message)"
        $Report += [PSCustomObject]@{
            UserPrincipalName = $User.UserPrincipalName
            DisplayName       = $User.DisplayName
            MailboxType       = "Unknown"
            LicenseStatus     = "Error: $($_.Exception.Message)"
            LastChecked       = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
        }
    }
}

# Export report to CSV
$CsvPath = "SharedMailboxesReport_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"
$Report | Export-Csv -Path $CsvPath -NoTypeInformation

# Disconnect from Microsoft Graph
Disconnect-MgGraph -ErrorAction SilentlyContinue
Write-Host "Report exported to $CsvPath in the current directory." -ForegroundColor Yellow
