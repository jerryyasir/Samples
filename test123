/**
 * Step 2: Retrieve and Display PDF Attachment in a Dialog with Print Option
 * Uses Power Pages Web API to download a PDF attachment from an annotation's documentbody.
 * Displays the PDF in a Bootstrap modal dialog with a print button.
 * Assumes safeAjax wrapper is included for authenticated AJAX calls.
 * Assumes Bootstrap is available in Power Pages (default in most templates).
 */
var annotationId = "00000000-0000-0000-0000-000000000002"; // Replace with actual annotation GUID
var metadataUrl = "/api/data/v9.2/annotations(" + annotationId + ")?$select=filename,mimetype";
var downloadUrl = "/api/data/v9.2/annotations(" + annotationId + ")/documentbody/$value";

// Create modal HTML structure dynamically (if not already in page)
var modalHtml = `
<div class="modal fade" id="pdfModal" tabindex="-1" role="dialog" aria-labelledby="pdfModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="pdfModalLabel">PDF Attachment</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <embed id="pdfEmbed" width="100%" height="600px" type="application/pdf">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" onclick="document.getElementById('pdfEmbed').contentWindow.print()">Print PDF</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
`;

// Append modal to page if not already present
if (!document.getElementById("pdfModal")) {
    document.body.insertAdjacentHTML("beforeend", modalHtml);
}

// Step 2: Fetch metadata and download PDF binary
safeAjax({
    type: "GET",
    url: metadataUrl,
    contentType: "application/json",
    success: function (metaData) {
        var filename = metaData.filename || "attachment.pdf"; // Fallback for filename
        var mimetype = metaData.mimetype || "application/pdf"; // Ensure PDF MIME type

        // Verify MIME type is PDF
        if (mimetype !== "application/pdf") {
            console.error("Attachment is not a PDF: " + mimetype);
            alert("Error: Selected attachment is not a PDF file.");
            return;
        }

        // Download the binary PDF attachment
        safeAjax({
            type: "GET",
            url: downloadUrl,
            contentType: "application/json",
            xhrFields: {
                responseType: "blob" // Handle binary data
            },
            success: function (blobData, textStatus, jqXHR) {
                // Create blob URL for PDF
                var blob = new Blob([blobData], { type: "application/pdf" });
                var pdfUrl = window.URL.createObjectURL(blob);

                // Update modal title and embed source
                document.querySelector("#pdfModalLabel").textContent = filename;
                document.getElementById("pdfEmbed").setAttribute("src", pdfUrl);

                // Show the modal (requires Bootstrap JS)
                $("#pdfModal").modal("show");

                // Clean up blob URL when modal is closed
                $("#pdfModal").on("hidden.bs.modal", function () {
                    window.URL.revokeObjectURL(pdfUrl);
                });
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error downloading PDF: ", textStatus, errorThrown);
                alert("Error downloading PDF attachment: " + errorThrown);
            }
        });
    },
    error: function (jqXHR, textStatus, errorThrown) {
        console.error("Error retrieving metadata: ", textStatus, errorThrown);
        alert("Error retrieving attachment metadata: " + errorThrown);
    }
});